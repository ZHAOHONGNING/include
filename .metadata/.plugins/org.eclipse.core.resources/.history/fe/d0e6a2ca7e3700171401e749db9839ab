package com.atguigu.cpes.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.atguigu.cpes.bean.Page;
import com.atguigu.cpes.bean.User;
import com.atguigu.cpes.service.UserService;
import com.atguigu.cpes.util.MD5Util;

/**
 * 用户控制器
 * 
 * @author 18801
 *
 */
@Controller
@RequestMapping("/user")
public class UserController {

	@Autowired
	private UserService userService;

	/**
	 * 批量删除用户
	 * 
	 */
	@RequestMapping("/deletes")
	public Object deletes(){
		
		return map;
	}

	/**
	 * 删除用户
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/delete")
	public Object delete(Integer id) {
		int count = userService.deleteUserById(id);
		Map<String, Object> map = new HashMap<>();
		map.put("success", count == 1);
		return map;
	}

	/**
	 * 跳转到用户新增页面
	 * 
	 * @return
	 */
	@RequestMapping("/add")
	public String add() {
		return "user/add";
	}

	/**
	 * 跳转到用户修改页面
	 * 
	 * @return
	 */
	@RequestMapping("/edit")
	public String edit(Integer id, Model model) {

		// 根据主键查询用户信息
		User user = userService.queryUserById(id);
		model.addAttribute("user", user);

		return "user/edit";
	}

	/**
	 * 新增用户数据
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/insert")
	public Object insert(User user) {

		Map<String, Object> resultMap = new HashMap<String, Object>();

		try {

			// 新增用户数据
			user.setUserpswd("123456");

			// 获取当前的系统时间
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String dateString = sdf.format(new Date());
			user.setCreatetime(dateString);

			userService.insertUser(user);

			resultMap.put("success", true);
		} catch (Exception e) {
			e.printStackTrace();
			resultMap.put("success", false);
		}

		return resultMap;
	}

	/**
	 * 修改用户数据
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/update")
	public Object update(User user) {

		Map<String, Object> resultMap = new HashMap<String, Object>();

		try {
			int result = userService.updateUser(user);
			System.out.println("result = " + result);
			resultMap.put("success", result == 1);
		} catch (Exception e) {
			e.printStackTrace();
			resultMap.put("success", false);
		}

		return resultMap;
	}

	/**
	 * 异步分页查询用户数据
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/queryPageUsers")
	public Object queryPageUsers(String qname, Integer pageno,
			@RequestParam(defaultValue = "1", required = false) Integer pagesize) {

		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("success", true);

		Page<User> userPage = userService.queryPage(pageno, pagesize, qname);
		userPage.setPageno(pageno);
		userPage.setPagesize(pagesize);
		resultMap.put("userpage", userPage);

		return resultMap;
	}

	/**
	 * 跳转到用户列表页面
	 * 
	 * @return
	 */
	@RequestMapping("/list")
	public String list(HttpSession session, @RequestParam(defaultValue = "1", required = false) Integer pageno,
			@RequestParam(defaultValue = "1", required = false) Integer pagesize, Model model) {
		// 分页查询用户数据
		// List<User> users = userSevice.queryUser4Page(pageno, pagesize);
		/*
		 * Page<User> userPage = userService.queryPage(pageno, pagesize);
		 * userPage.setPageno(pageno); userPage.setPagesize(pagesize);
		 * 
		 * // 保存用户分页数据（请求） model.addAttribute("userpage", userPage);
		 */
		return "user/list";
	}

	/**
	 * 用户登录，查询用户信息
	 * 
	 * @return
	 */
	/**
	 * 使用AJAX实现用户登录，查询用户信息
	 * 
	 * ResponseBody注解表示将当前方法的返回数据作为响应体的内容，因为在配置文件中已经对返回结果的类型进行了配置，所以方法执行后
	 * 会将返回对象自动转换为JSON格式的字符串
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/dologin")
	public Object dologin(User user, Model model, HttpSession session) {
		// Model数据存储范围为request
		Map<String, Object> resultMap = new HashMap<String, Object>();
		// map ==> JSON ==> { key : value }
		// List ==> JSON ==> []
		// 查询数据之前，应该将密码进行加密后和数据库进行匹配
		User dbUser = userService.queryUser4Login(user);
		if (dbUser == null) {
			resultMap.put("success", false);
		} else {
			session.setAttribute("suser", dbUser);
			resultMap.put("success", true);
		}

		return resultMap;
	}

}
