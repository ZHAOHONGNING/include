package com.teamway.util;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class ILOG {
	/*
	 * 日志等级： EMERG 8 系统不可用 ALERT 7 警报，事情已经发生 CRIT 6 // 预防，事件就要发生 ERR 5 // 普通错误
	 * WARNING 6 // 警告 NOTICE 3 // 提醒信息 INFO 2 // 通知信息 DEBUG 1 // 调试类日志 NONE 0
	 * // 不记录日志
	 */

	/*
	 * 日志类 日志记录格式: [2017-10-01 08:00:01][INFO] ...... 每个日志文件超过规定大小后，需要产生新日志文件。
	 * 老日志文件重新命名，在文件名后添加当前时间。 例如alarm.log.20171023_115403.log
	 * 当日志存放目录中文件超出预定大小后，需要删除最早日志。
	 */
	/*
	 * 初始化日志 path - 日志存放目录 logName - 日志文件名 level - 日志等级，后面writeLog中小于此等级的日志都不用记录
	 * totalSize - 日志目录中所有日志大小 fileSize - 每个日志文件大小
	 */
	private static final String DATE_PATTERN_FULL_ = "yyyyMMddHHmmss";
	private static final String DATE_PATTERN_ = "yyyy-MM-dd HH:mm:ss";
	private String path;
	private String logName;
	private int level;
	private int totalSize;
	private int fileSize;
	// private Map<Integer, String> logQueue = new HashMap<Integer, String>();
	// private Map<String, Integer> logDetail = new HashMap<String, Integer>();
	/*
	*
	*/
	private Map<Integer, String> logQueue = new ConcurrentHashMap<Integer, String>();
	private Map<String, Integer> logDetail = new ConcurrentHashMap<String, Integer>();

	private int head;
	private int tail;
	private int size;
	private boolean b;

	public boolean initLog(String path, String logName, int level, int totalSize, int fileSize) {
		this.path = path;
		this.logName = logName;
		this.level = level;
		this.totalSize = totalSize;
		this.fileSize = fileSize;
		head = 0;
		tail = 0;
		size = 0;
		return true;
	}

	/*
	 * 写日志 level - 本条日志等级 log - 日志信息，注意每条日志后面需要换行
	 */
	public void writeLog(int level, String... log) throws Exception {
		OutputStreamWriter writer = null;
		File file = null;
		FileOutputStream fop = null;
		int logSize = 0;
		if (this.level > level) {
			return;
		}
		for (String l : log) {
			// String currencyLogName = "";
			Integer currencyLogSize = 0;
			int currencySize = l.getBytes().length;

			if (currencySize + size > totalSize) {
				// 如果代码走了这里一定是headLog的值为null，所以空指针
				String headLog = null;
				try {
					headLog = logQueue.get(new Integer(head));
					size -= logDetail.get(headLog);
				} catch (Exception e) {
				}
				head++;
				File delFile = new File(path + headLog);
				delFile.delete();
				// System.out.println(delete);
			}
			String tailLogName = logQueue.get(new Integer(tail));

			if (tailLogName == null) {
				file = new File(path + logName);
				currencyLogSize = currencySize;

			} else {
				logSize = logDetail.get(tailLogName).intValue();

				if (logSize + currencySize > fileSize) {

					File tailFile = new File(path + tailLogName);
					Date date = new Date();
					SimpleDateFormat sdf = new SimpleDateFormat(DATE_PATTERN_FULL_);
					String format = sdf.format(date);
					String newTailLogName = tailLogName + format + ".log";
					File newtailFile = new File(path + newTailLogName);
					tailFile.renameTo(newtailFile);
					logQueue.put(tail, newTailLogName);
					logDetail.remove(tailLogName);
					logDetail.put(newTailLogName, logSize);
					file = new File(path + tailLogName);
					currencyLogSize = currencySize;
					tail++;
				} else {
					file = new File(path + tailLogName);
					currencyLogSize = logSize + currencySize;
				}

			}
			logQueue.put(tail, logName);
			logDetail.put(logName, currencyLogSize);
			size += currencySize;
			if (!file.exists()) {
				file.createNewFile();

			}
			fop = new FileOutputStream(file, true);
			writer = new OutputStreamWriter(fop, "UTF-8");
			Date date = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat(DATE_PATTERN_);
			String format = sdf.format(date);
			writer.append("[" + format + "]-" + "[" + level + "]");
			writer.append(l);
			writer.append("\r\n");
			writer.close();
			fop.close();
		}
		// 读文件
		if (!b) {
			return;
		}
		File pfile = new File(path);
		File[] files = pfile.listFiles();
		for (File file2 : files) {
			FileReader reader = new FileReader(file2);
			BufferedReader br = new BufferedReader(reader);
			String str = null;
			while ((str = br.readLine()) != null) {
				System.out.println(str); // 输出打印exercise.txt文件中的数据
			}
			br.close();
		}

	}

	// 重新设置日志文件等级
	public void resetLevel(int level) {
		this.level = level;
	}

	// 控制是否控制台输出
	public void setSonsoleOutput(boolean b) {
		this.b = b;
	}
}
