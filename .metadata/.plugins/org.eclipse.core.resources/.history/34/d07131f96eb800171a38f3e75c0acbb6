package com.zhao.teamway;

import java.io.IOException;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Log2 {
	
	// 创建对象
	Logger logger = Logger.getLogger(Log2.class.getName());
	// 自定义等级
	Level lev = Level.ALL;
	//定义文件名字格式E:\DoyoGames\Games\10450369

	// 自定义格式
	MyFormat myformat = new MyFormat();
	// 自定义老旧的文件格式
	MyOldFormat myoldformat = new MyOldFormat();
	/*
	 * 日志等级： EMERG 8 系统不可用 ALERT 7 // 警报，事情已经发生 CRIT 6 // 预防，事件就要发生 ERR 5 //
	 * 普通错误 WARNING 6 // 警告 NOTICE 3 // 提醒信息 INFO 2 // 通知信息 DEBUG 1 // 调试类日志
	 * NONE 0 // 不记录日志
	 */

	/*
	 * 日志类 日志记录格式: [2017-10-01 08:00:01][INFO] ...... 每个日志文件超过规定大小后，需要产生新日志文件。
	 * 老日志文件重新命名，在文件名后添加当前时间。 例如alarm.log.20171023_115403.log
	 * 当日志存放目录中文件超出预定大小后，需要删除最早日志。
	 */
	/*
	 * 初始化日志 path - 日志存放目录 logName - 日志文件名 level - 日志等级，后面writeLog中小于此等级的日志都不用记录
	 * totalSize - 日志目录中所有日志大小 fileSize - 每个日志文件大小
	 */
	public boolean initLog(String path, String logName, int level, int totalSize, int fileSize)
			throws SecurityException, IOException {
		/*
		 * FileHandler(String pattern, int limit, int count, boolean append)
		 * pattern - 为输出文件命名的模式。f 'b\ limit - 写入到任何一个文件的最大字节数。
		 *  count - 要使用的文件数。
		 * append - 指定 append 模式。 
		 * http://blog.csdn.net/defonds/article/details/71191697
		 */
		
		FileHandler fileHandler = new FileHandler(path, fileSize, 100, false);
		
			fileHandler.setFormatter(myformat);
			
			//日志编码格式
			fileHandler.setEncoding("utf-8");
			logger.addHandler(fileHandler);
            logger.setLevel(lev);
            logger.log(lev, "hdsafhidaughauidhfui");
		return true;
	}

	/*
	 * 写日志 level - 本条日志等级 log - 日志信息，注意每条日志后面需要换行
	 */
	public void writeLog(int level, String... log) {

		// "/n"
		StringBuilder sb = new StringBuilder();
		sb.append("\n");

	}

	// 重新设置日志文件等级
	public void resetLevel(int level) {

		// logger.setLevel(lev);
	}

	// 设置是否在控制台输出
	public void setSonsoleOutput(boolean b) {
		if (b == true) {

		}
	}

}
